//
//  Publishers.Multicast.swift
//  
//
//  Created by Sergej Jaskiewicz on 14.06.2019.
//

extension Publisher {

    /// Applies a closure to create a subject that delivers elements to subscribers.
    ///
    /// Use a multicast publisher when you have multiple downstream subscribers, but you
    /// want upstream publishers to only process one `receive(_:)` call per event.
    /// This is useful when upstream publishers are doing expensive work you don’t want
    /// to duplicate, like performing network requests.
    ///
    /// In contrast with `multicast(subject:)`, this method produces a publisher that
    /// creates a separate `Subject` for each subscriber.
    ///
    /// The following example uses a sequence publisher as a counter to publish three
    /// random numbers, generated by a `map(_:)` operator.
    /// It uses a `multicast(_:)` operator whose closure creates a `PassthroughSubject`
    /// to share the same random number to each of two subscribers. Because the multicast
    /// publisher is a `ConnectablePublisher`, publishing only begins after a call to
    /// `connect()`.
    ///
    ///     let pub = ["First", "Second", "Third"].publisher
    ///         .map( { return ($0, Int.random(in: 0...100)) } )
    ///         .print("Random")
    ///         .multicast { PassthroughSubject<(String, Int), Never>() }
    ///
    ///     cancellable1 = pub
    ///        .sink { print ("Stream 1 received: \($0)")}
    ///     cancellable2 = pub
    ///        .sink { print ("Stream 2 received: \($0)")}
    ///     pub.connect()
    ///
    ///     // Prints:
    ///     // Random: receive value: (("First", 9))
    ///     // Stream 2 received: ("First", 9)
    ///     // Stream 1 received: ("First", 9)
    ///     // Random: receive value: (("Second", 46))
    ///     // Stream 2 received: ("Second", 46)
    ///     // Stream 1 received: ("Second", 46)
    ///     // Random: receive value: (("Third", 26))
    ///     // Stream 2 received: ("Third", 26)
    ///     // Stream 1 received: ("Third", 26)
    ///
    /// In this example, the output shows that the `print(_:to:)` operator receives each
    /// random value only one time, and then sends the value to both subscribers.
    ///
    /// - Parameter createSubject: A closure to create a new `Subject` each time
    ///   a subscriber attaches to the multicast publisher.
    
    /// 应用一个闭包来创建一个将元素传递给订阅者的主题。
    ///
    /// 当你有多个下游订阅者，但希望上游发布者每个事件只处理一次`receive(_:)`调用时，可以使用多播发布者。
    /// 这在上游发布者执行昂贵的工作，而你不希望重复执行该工作时非常有用，比如执行网络请求。
    ///
    /// 与 `multicast(subject:)` 不同，此方法生成一个为每个订阅者创建单独 `Subject` 的发布者。
    ///
    /// 以下示例使用序列发布者作为计数器，发布三个由 `map(_:)` 操作符生成的随机数。
    /// 它使用 `multicast(_:)` 操作符，其闭包创建一个 `PassthroughSubject` 以将相同的随机数传递给两个订阅者。
    /// 由于多播发布者是 `ConnectablePublisher`，只有在调用 `connect()` 后才会开始发布。
    ///
    ///     let pub = ["First", "Second", "Third"].publisher
    ///         .map( { return ($0, Int.random(in: 0...100)) } )
    ///         .print("Random")
    ///         .multicast { PassthroughSubject<(String, Int), Never>() }
    ///
    ///     cancellable1 = pub
    ///        .sink { print ("Stream 1 received: \($0)")}
    ///     cancellable2 = pub
    ///        .sink { print ("Stream 2 received: \($0)")}
    ///     pub.connect()
    ///
    ///     // 输出:
    ///     // Random: receive value: (("First", 9))
    ///     // Stream 2 received: ("First", 9)
    ///     // Stream 1 received: ("First", 9)
    ///     // Random: receive value: (("Second", 46))
    ///     // Stream 2 received: ("Second", 46)
    ///     // Stream 1 received: ("Second", 46)
    ///     // Random: receive value: (("Third", 26))
    ///     // Stream 2 received: ("Third", 26)
    ///     // Stream 1 received: ("Third", 26)
    ///
    /// 在此示例中，输出显示`print(_:to:)`操作符仅接收每个随机值一次，然后将该值发送给两个订阅者。
    ///
    /// - Parameter createSubject: 一个闭包，每次订阅者连接到多播发布者时创建一个新的 `Subject`。
    ///
    /// - Returns: 一个多播发布者，用于在订阅者连接时生成新的 `Subject`。

    public func multicast<SubjectType: Subject>(
        _ createSubject: @escaping () -> SubjectType
    ) -> Publishers.Multicast<Self, SubjectType>
        where Failure == SubjectType.Failure, Output == SubjectType.Output
    {
        return Publishers.Multicast(upstream: self, createSubject: createSubject)
    }

    /// Provides a subject to deliver elements to multiple subscribers.
    ///
    /// Use a multicast publisher when you have multiple downstream subscribers, but you
    /// want upstream publishers to only process one `receive(_:)` call per event.
    /// This is useful when upstream publishers are doing expensive work you don’t want
    /// to duplicate, like performing network requests.
    ///
    /// In contrast with `multicast(_:)`, this method produces a publisher that shares
    /// the provided `Subject` among all the downstream subscribers.
    ///
    /// The following example uses a sequence publisher as a counter to publish three
    /// random numbers, generated by a `map(_:)` operator.
    /// It uses a `multicast(subject:)` operator with a `PassthroughSubject` to share
    /// the same random number to each of two subscribers. Because the multicast publisher
    /// is a `ConnectablePublisher`, publishing only begins after a call to `connect()`.
    ///
    ///     let pub = ["First", "Second", "Third"].publisher
    ///         .map( { return ($0, Int.random(in: 0...100)) } )
    ///         .print("Random")
    ///         .multicast(subject: PassthroughSubject<(String, Int), Never>())
    ///
    ///     cancellable1 = pub
    ///         .sink { print ("Stream 1 received: \($0)")}
    ///     cancellable2 = pub
    ///         .sink { print ("Stream 2 received: \($0)")}
    ///     pub.connect()
    ///
    ///     // Prints:
    ///     // Random: receive value: (("First", 78))
    ///     // Stream 2 received: ("First", 78)
    ///     // Stream 1 received: ("First", 78)
    ///     // Random: receive value: (("Second", 98))
    ///     // Stream 2 received: ("Second", 98)
    ///     // Stream 1 received: ("Second", 98)
    ///     // Random: receive value: (("Third", 61))
    ///     // Stream 2 received: ("Third", 61)
    ///     // Stream 1 received: ("Third", 61)
    ///
    /// In this example, the output shows that the `print(_:to:)` operator receives each
    /// random value only one time, and then sends the value to both subscribers.
    
    /// - Parameter subject: A subject to deliver elements to downstream subscribers.
    /// 提供一个主题以将元素传递给多个订阅者。
    ///
    /// 当你有多个下游订阅者，但希望上游发布者每个事件只处理一次`receive(_:)`调用时，可以使用多播发布者。
    /// 这在上游发布者执行昂贵的工作，而你不希望重复执行该工作时非常有用，比如执行网络请求。
    ///
    /// 与 `multicast(_:)` 不同，此方法生成一个发布者，它在所有下游订阅者之间共享提供的 `Subject`。
    ///
    /// 以下示例使用序列发布者作为计数器，发布三个由 `map(_:)` 操作符生成的随机数。
    /// 它使用 `multicast(subject:)` 操作符与 `PassthroughSubject` 一起使用，以将相同的随机数传递给两个订阅者。
    /// 由于多播发布者是 `ConnectablePublisher`，只有在调用 `connect()` 后才会开始发布。
    ///
    ///     let pub = ["First", "Second", "Third"].publisher
    ///         .map( { return ($0, Int.random(in: 0...100)) } )
    ///         .print("Random")
    ///         .multicast(subject: PassthroughSubject<(String, Int), Never>())
    ///
    ///     cancellable1 = pub
    ///         .sink { print ("Stream 1 received: \($0)")}
    ///     cancellable2 = pub
    ///         .sink { print ("Stream 2 received: \($0)")}
    ///     pub.connect()
    ///
    ///     // 输出:
    ///     // Random: receive value: (("First", 78))
    ///     // Stream 2 received: ("First", 78)
    ///     // Stream 1 received: ("First", 78)
    ///     // Random: receive value: (("Second", 98))
    ///     // Stream 2 received: ("Second", 98)
    ///     // Stream 1 received: ("Second", 98)
    ///     // Random: receive value: (("Third", 61))
    ///     // Stream 2 received: ("Third", 61)
    ///     // Stream 1 received: ("Third", 61)
    ///
    /// 在此示例中，输出显示`print(_:to:)`操作符仅接收每个随机值一次，然后将该值发送给两个订阅者。
    ///
    /// - Parameter subject: 一个主题，用于将元素传递给下游订阅者。
    /// - Returns: 一个多播发布者，用于在订阅者连接时共享提供的 `Subject`。

    public func multicast<SubjectType: Subject>(
        subject: SubjectType
    ) -> Publishers.Multicast<Self, SubjectType>
        where Failure == SubjectType.Failure, Output == SubjectType.Output
    {
        return multicast { subject }
    }
}

extension Publishers {

    /// A publisher that uses a subject to deliver elements to multiple subscribers.
    ///
    /// Use a multicast publisher when you have multiple downstream subscribers, but you
    /// want upstream publishers to only process one `receive(_:)` call per event.
    // 这是一个引用对象了.
    public final class Multicast<Upstream: Publisher, SubjectType: Subject>
        : ConnectablePublisher
        where Upstream.Failure == SubjectType.Failure,
              Upstream.Output == SubjectType.Output
    {
        public typealias Output = Upstream.Output

        public typealias Failure = Upstream.Failure

        /// The publisher that this publisher receives elements from.
        public let upstream: Upstream

        /// A closure to create a new Subject each time a subscriber attaches
        /// to the multicast publisher.
        
        // 这是一个闭包, 可以返回一个 Subject 的对象出来.
        public let createSubject: () -> SubjectType

        private let lock = UnfairLock.allocate()

        private var subject: SubjectType?

        private var lazySubject: SubjectType {
            lock.lock()
            if let subject = subject {
                lock.unlock()
                return subject
            }

            let subject = createSubject()
            self.subject = subject
            lock.unlock()
            return subject
        }

        /// Creates a multicast publisher that applies a closure to create a subject that
        /// delivers elements to subscribers.
        ///
        /// - Parameter createSubject: A closure that returns a `Subject` each time
        ///   a subscriber attaches to the multicast publisher.
        public init(upstream: Upstream, createSubject: @escaping () -> SubjectType) {
            self.upstream = upstream
            self.createSubject = createSubject
        }

        deinit {
            lock.deallocate()
        }

        // 下游来临, 是将下游添加到了 subject 上了.
        public func receive<Downstream: Subscriber>(subscriber: Downstream)
            where SubjectType.Failure == Downstream.Failure,
                  SubjectType.Output == Downstream.Input
        {
            // Subject 的内部, 会有 Demand 的管理.
            lazySubject.subscribe(Inner(parent: self, downstream: subscriber))
        }

        // connect 的时候, 才真正的把 上游和 subject 进行关联.
        // 使用这种方式, 完成了 ConnectablePublisher 的管理.
        public func connect() -> Cancellable {
            // 返回是的一个 SubjectSubscriber.
            return upstream.subscribe(lazySubject)
        }
    }
}

extension Publishers.Multicast {
    // 没太明白, 这个 Inner 有什么意义啊. 
    private final class Inner<Downstream: Subscriber>
        : Subscriber,
          Subscription,
          CustomStringConvertible,
          CustomReflectable,
          CustomPlaygroundDisplayConvertible
        where Upstream.Output == Downstream.Input, Upstream.Failure == Downstream.Failure
    {
        // NOTE: This class has been audited for thread safety

        typealias Input = Upstream.Output

        typealias Failure = Upstream.Failure

        private enum State {
            case ready(upstream: Upstream, downstream: Downstream)
            case subscribed(upstream: Upstream,
                            downstream: Downstream,
                            subjectSubscription: Subscription)
            case terminal
        }

        private let lock = UnfairLock.allocate()

        private var state: State

        fileprivate init(parent: Publishers.Multicast<Upstream, SubjectType>,
                         downstream: Downstream) {
            state = .ready(upstream: parent.upstream, downstream: downstream)
        }

        deinit {
            lock.deallocate()
        }

        fileprivate var description: String { return "Multicast" }

        fileprivate var customMirror: Mirror {
            return Mirror(self, children: EmptyCollection())
        }

        fileprivate var playgroundDescription: Any { return description }
        
        
        
        
        // 这个 Subscription, 会是 Subject - Conduit
        func receive(subscription: Subscription) {
            lock.lock()
            guard case let .ready(upstream, downstream) = state else {
                lock.unlock()
                subscription.cancel()
                return
            }
            state = .subscribed(upstream: upstream,
                                downstream: downstream,
                                subjectSubscription: subscription)
            lock.unlock()
            downstream.receive(subscription: self)
        }

        func receive(_ input: Input) -> Subscribers.Demand {
            lock.lock()
            guard case let .subscribed(_, downstream, subjectSubscription) = state else {
                lock.unlock()
                return .none
            }
            lock.unlock()
            let newDemand = downstream.receive(input)
            if newDemand > 0 {
                // Subject 的 Conduit 进行 demand 的管理.
                subjectSubscription.request(newDemand)
            }
            return .none
        }

        func receive(completion: Subscribers.Completion<Failure>) {
            lock.lock()
            guard case let .subscribed(_, downstream, _) = state else {
                lock.unlock()
                return
            }
            state = .terminal
            lock.unlock()
            downstream.receive(completion: completion)
        }

        func request(_ demand: Subscribers.Demand) {
            lock.lock()
            guard case let .subscribed(_, _, subjectSubscription) = state else {
                lock.unlock()
                return
            }
            lock.unlock()
            subjectSubscription.request(demand)
        }

        func cancel() {
            lock.lock()
            guard case let .subscribed(_, _, subjectSubscription) = state else {
                lock.unlock()
                return
            }
            state = .terminal
            lock.unlock()
            subjectSubscription.cancel()
        }
    }
}
